{"version":3,"sources":["globalFunctions.js","treeTops.js","dataSets.js","generators.js","decoder.js","grass.js","App.jsx","trunk.js","island.js","rock.js","generateModel.js","index.js"],"names":["getRandomFloat","min","max","Math","random","getRandomInt","ceil","floor","updateVertices","mesh","updateMatrix","geometry","applyMatrix4","matrix","position","set","rotation","scale","getVertices","verticesArray","vertices","attributes","array","i","length","push","Vector3","convertVerticesToVectors","x","y","z","index","convertVectorsToVertices","vectorArray","sort","a","b","forEach","vector","getMatchingVertices","indexArray","verticle","generateTop","trunkTop","scene","topData","color","tipHeight","data","tipOffsetX","tipOffsetZ","segmentHeight","topOffsetX","topOffsetZ","material","MeshPhysicalMaterial","parseInt","replace","flatShading","group","Group","height","points","THREE","getPoints","previousPoint","point","item","topMesh","pointX","pointY","bottomWidth","topWidth","rotationY","lastVerticle","direction","subVectors","orientation","Matrix4","lookAt","Object3D","up","multiply","edgeGeometry","CylinderGeometry","edge","setAttribute","rotateY","cylinderMesh","bottomRadius","topRadius","needsUpdate","add","translateY","trunkColorsData","value","probability","trunkWidthData","trunkShrinkData","trunkSegmentAmountData","trunkHeightData","topColorsData","tipHeightData","tipOffsetData","topOffsetData","topAmountData","topBottomWidthData","topSegmentShrinkData","topShrinkData","topHeightData","topRotationData","generateItemFromDataset","dataArray","generatedArray","dataArrayGenerator","generate","trunkColor","trunkWidth","trunkShrink","trunkArray","segmentAmount","endPoint","pointArray","toFixed","join","trunkArrayGenerator","topColor","tipOffsetY","topArray","topSegmentShrink","topShrink","segmentArray","topArrayGenerator","stringToPointArray","string","split","map","parseFloat","seed","convertStringToData","itemArray","s","total","match","shift","convertStringToNumber","decoder","age","splitData","trunkData","width","shrink","trunkDecoder","topDecoder","totalSegmentAmount","splice","grass","ConeGeometry","Mesh","heights","filter","self","findIndex","t","indexOf","newVertices","Float32BufferAttribute","App","useState","Scene","setScene","PerspectiveCamera","window","innerWidth","innerHeight","camera","setCamera","container","useRef","growTree","start","dna","meshArray","Float32Array","noise2D","makeNoise2D","p","normalize","multiplyScalar","meshes","concat","ConvexGeometry","trunkMesh","generateTrunk","useEffect","islandMesh","radius","DodecahedronGeometry","vertexColors","flatVertices","matchingVertices","v","colors","Color","r","g","createIsland","sampler","MeshSurfaceSampler","build","tempPosition","meshPositions","treeCounter","sample","distanceTo","check","rockCounter","OctahedronGeometry","noise3D","makeNoise3D","rock","grassModels","grassCounter","clone","light","AmbientLight","directionalLight1","DirectionalLight","directionalLight2","renderer","WebGL1Renderer","alpha","setSize","current","innerHTML","appendChild","domElement","stop","controls","OrbitControls","mouseButtons","LEFT","MOUSE","ROTATE","MIDDLE","DOLLY","RIGHT","PAN","update","addEventListener","render","animate","requestAnimationFrame","toDataURL","generateModel","className","ref","style","backgroundImage","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1f47580.chunk.js","sourcesContent":["import {Vector3} from \"three\";\r\n\r\nexport const getRandomFloat = (min, max) => {\r\n    return Math.random() * (max - min) + min\r\n}\r\n\r\nexport const getRandomInt = (min, max) => {\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const updateVertices = (mesh) => {\r\n    mesh.updateMatrix()\r\n    mesh.geometry.applyMatrix4( mesh.matrix )\r\n    mesh.position.set( 0, 0, 0 )\r\n    mesh.rotation.set( 0, 0, 0 )\r\n    mesh.scale.set( 1, 1, 1 )\r\n    mesh.updateMatrix()\r\n}\r\n\r\nexport const getVertices = (mesh) => {\r\n    let verticesArray = []\r\n    let vertices = mesh.geometry.attributes.position.array\r\n    for (let i = 0; i < (vertices.length - 1); i += 3){\r\n        verticesArray.push(new Vector3(vertices[i], vertices[i + 1], vertices[i + 2]))\r\n    }\r\n    return verticesArray\r\n}\r\n\r\nexport const convertVerticesToVectors = (verticesArray) => {\r\n    let vertices = []\r\n    for (let i = 0; i < verticesArray.length; i += 3){\r\n        vertices.push({x: verticesArray[i], y: verticesArray[i + 1], z: verticesArray[i + 2], index: i})\r\n    }\r\n    return vertices\r\n}\r\n\r\nexport const convertVectorsToVertices = (vectorArray) => {\r\n    let verticesArray = []\r\n    vectorArray.sort((a, b) => a.index > b.index ? 1 : a.index < b.index ? -1 : 0)\r\n    vectorArray.forEach((vector) => {\r\n        verticesArray.push(vector.x, vector.y, vector.z)\r\n    })\r\n    return verticesArray\r\n}\r\n\r\nexport const getMatchingVertices = (vertices, index) => {\r\n    let indexArray = []\r\n    vertices.forEach((verticle, i) => {\r\n        if (vertices[index].x === verticle.x && vertices[index].y === verticle.y && vertices[index].z === verticle.z){\r\n            indexArray.push(i)\r\n        }\r\n    })\r\n    return indexArray\r\n}\r\n\r\nexport const convertStringToNumber = (s) => {\r\n    let total = 0\r\n    s = s.replace(/\\s/g, '').match(/[+\\-]?([0-9\\.\\s]+)/g) || []\r\n    while(s.length) total += parseFloat(s.shift())\r\n    return total\r\n}\r\n","import {\r\n    CylinderGeometry,\r\n    Mesh,\r\n    Group, MeshPhysicalMaterial, Vector3, MeshBasicMaterial, Matrix4, Object3D\r\n} from \"three\"\r\nimport {convertVerticesToVectors, getMatchingVertices, convertVectorsToVertices,updateVertices} from \"./globalFunctions\"\r\nimport * as THREE from \"three\"\r\n\r\nconst cylinderMesh = (pointX, pointY, material, bottomWidth, topWidth, rotationY, lastVerticle, tipHeight, tipOffsetX, tipOffsetZ) => {\r\n    const direction = new Vector3().subVectors(pointY, pointX)\r\n    const orientation = new Matrix4()\r\n    orientation.lookAt(pointX, pointY, new Object3D().up)\r\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, -1, 0, 0,\r\n        0, 0, 0, 1))\r\n    const edgeGeometry = new CylinderGeometry(topWidth, bottomWidth, direction.length(), 10, 2, false)\r\n    const edge = new THREE.Mesh(edgeGeometry, material)\r\n    let vertices = convertVerticesToVectors(edge.geometry.attributes.position.array)\r\n    vertices.sort((a, b) => a.y > b.y ? 1 : a.y < b.y ? -1 : 0)\r\n\r\n    for (let i = 0; i < 11; i += 2){\r\n        getMatchingVertices(vertices, i).forEach(index => {\r\n            vertices[index].y -= 0.7\r\n        })\r\n    }\r\n\r\n    getMatchingVertices(vertices, 20).forEach(index => {\r\n        vertices[index].y += 1\r\n    })\r\n\r\n    if (lastVerticle){\r\n        getMatchingVertices(vertices, 60).forEach(index => {\r\n            vertices[index].y += tipHeight\r\n            vertices[index].x += tipOffsetX\r\n            vertices[index].z += tipOffsetZ\r\n        })\r\n    }\r\n    edge.geometry.setAttribute('position', new THREE.Float32BufferAttribute(convertVectorsToVertices(vertices), 3))\r\n    updateVertices(edge)\r\n    edge.applyMatrix4(orientation)\r\n    edge.position.x = (pointY.x + pointX.x) / 2\r\n    edge.position.y = (pointY.y + pointX.y) / 2\r\n    edge.position.z = (pointY.z + pointX.z) / 2\r\n    edge.rotateY(rotationY * 0.0174532925)\r\n\r\n    updateVertices(edge)\r\n\r\n    return edge\r\n}\r\n\r\nexport const generateTop = (trunkTop, scene, topData) => {\r\n    let {color, tipHeight, data, tipOffsetX, tipOffsetZ, segmentHeight, topOffsetX, topOffsetZ} = topData\r\n    const material = new MeshPhysicalMaterial({color: parseInt(color.replace(\"#\",\"0x\"),16), flatShading: true})\r\n    const group = new Group()\r\n    const height = data.length * segmentHeight\r\n    const curve = new THREE.QuadraticBezierCurve3(\r\n        new THREE.Vector3( trunkTop.x, trunkTop.y, trunkTop.z ),\r\n        new THREE.Vector3( trunkTop.x - (topOffsetX > 1 ? -1 : topOffsetX), trunkTop.y + (height / 2), trunkTop.z - (topOffsetZ > 1 ? -1 : topOffsetZ) ),\r\n        new THREE.Vector3( trunkTop.x + topOffsetX, trunkTop.y + height, trunkTop.z + topOffsetZ ),\r\n    );\r\n    const points = curve.getPoints(data.length - 1);\r\n    let previousPoint = null\r\n    points.forEach((point, i) => {\r\n        if (previousPoint) {\r\n            const item = data[i]\r\n            const topMesh = cylinderMesh(\r\n                new Vector3(previousPoint.x, previousPoint.y - 0.3, previousPoint.z),\r\n                point, material, item.bottomRadius, item.topRadius, item.rotationY,\r\n                i === points.length - 1, tipHeight, tipOffsetX, tipOffsetZ)\r\n            updateVertices(topMesh)\r\n            topMesh.geometry.attributes.position.needsUpdate = true\r\n            group.add( topMesh );\r\n        }\r\n        previousPoint = point\r\n    })\r\n    group.translateY(-1)\r\n    return group\r\n}","export const trunkColorsData = [\r\n\t{value: \"#d59168\", probability: 1},\r\n\t{value: \"#b97952\", probability: 10},\r\n\t{value: \"#a46239\", probability: 10},\r\n\t{value: \"#6e3b1c\", probability: 100},\r\n\t{value: \"#4f2409\", probability: 100},\r\n\t{value: \"#593e30\", probability: 1000},\r\n\t{value: \"#52473e\", probability: 1000},\r\n\t{value: \"#2f1b10\", probability: 1000}\r\n]\r\n\r\nexport const trunkWidthData = [\r\n\t{value: 0.65, probability: 1},\r\n\t{value: 0.68, probability: 5},\r\n\t{value: 0.7, probability: 100},\r\n\t{value: 0.72, probability: 5},\r\n\t{value: 0.75, probability: 1},\r\n]\r\n\r\nexport const trunkShrinkData = [\r\n\t{value: 0.8, probability: 1},\r\n\t{value: 0.81, probability: 5},\r\n\t{value: 0.82, probability: 20},\r\n\t{value: 0.83, probability: 100},\r\n\t{value: 0.84, probability: 100},\r\n\t{value: 0.85, probability: 20}\r\n]\r\n\r\nexport const trunkSegmentAmountData = [\r\n\t{value: 4, probability: 10},\r\n\t{value: 5, probability: 100},\r\n\t{value: 6, probability: 100},\r\n\t{value: 7, probability: 10},\r\n]\r\n\r\nexport const trunkHeightData = [\r\n\t{value: 4, probability: 100},\r\n\t{value: 4.5, probability: 50},\r\n\t{value: 5, probability: 50}\r\n]\r\n\r\nexport const topColorsData = [\r\n\t{value: \"#b8da67\", probability: 1},\r\n\t{value: \"#91b341\", probability: 10},\r\n\t{value: \"#384d10\", probability: 10},\r\n\t{value: \"#2f3b17\", probability: 100},\r\n\t{value: \"#99b93e\", probability: 100},\r\n\t{value: \"#647a26\", probability: 1000},\r\n\t{value: \"#313b0b\", probability: 1000},\r\n\t{value: \"#1e2309\", probability: 1000}\r\n]\r\n\r\nexport const tipHeightData = [\r\n\t{value: 3, probability: 100},\r\n\t{value: 3.3, probability: 200},\r\n\t{value: 3.5, probability: 100},\r\n\t{value: 3.8, probability: 50},\r\n\t{value: 4, probability: 10},\r\n]\r\n\r\nexport const tipOffsetData = [\r\n\t{value: 0, probability: 50},\r\n\t{value: 0.1, probability: 50},\r\n\t{value: 0.2, probability: 50},\r\n\t{value: 0.3, probability: 5},\r\n]\r\n\r\nexport const topOffsetData = [\r\n\t{value: -0.8, probability: 50},\r\n\t{value: -0.5, probability: 50},\r\n\t{value: -0.3, probability: 50},\r\n\t{value: 0, probability: 1000},\r\n\t{value: 0.3, probability: 50},\r\n\t{value: 0.5, probability: 50},\r\n\t{value: 0.8, probability: 50},\r\n]\r\n\r\nexport const topAmountData = [\r\n\t{value: 3, probability: 200},\r\n\t{value: 4, probability: 200},\r\n\t{value: 5, probability: 50},\r\n\t{value: 6, probability: 10},\r\n\t{value: 7, probability: 2},\r\n]\r\n\r\nexport const topBottomWidthData = [\r\n\t{value: 4, probability: 1},\r\n\t{value: 4.05, probability: 100},\r\n\t{value: 4.1, probability: 500},\r\n\t{value: 4.15, probability: 100},\r\n\t{value: 4.2, probability: 500},\r\n\t{value: 4.25, probability: 100},\r\n\t{value: 4.3, probability: 20},\r\n\t{value: 4.35, probability: 1},\r\n]\r\n\r\nexport const topSegmentShrinkData = [\r\n\t{value: 0.5, probability: 10},\r\n\t{value: 0.55, probability: 50},\r\n\t{value: 0.60, probability: 100},\r\n\t{value: 0.65, probability: 50},\r\n\t{value: 0.7, probability: 10},\r\n]\r\n\r\nexport const topShrinkData = [\r\n\t{value: 0.85, probability: 50},\r\n\t{value: 0.80, probability: 50},\r\n\t{value: 0.75, probability: 50},\r\n]\r\n\r\nexport const topHeightData = [\r\n\t{value: 1.8, probability: 10},\r\n\t{value: 1.9, probability: 50},\r\n\t{value: 2, probability: 100},\r\n\t{value: 2.1, probability: 50},\r\n\t{value: 2.2, probability: 10},\r\n]\r\n\r\nexport const topRotationData = [\r\n\t{value: -30, probability: 100},\r\n\t{value: -20, probability: 100},\r\n\t{value: -10, probability: 100},\r\n\t{value: 0, probability: 100},\r\n\t{value: 10, probability: 100},\r\n\t{value: 20, probability: 100},\r\n\t{value: 30, probability: 100},\r\n]\r\n\r\nexport const treeRotationData = [\r\n\t{value: -10, probability: 1},\r\n\t{value: -5, probability: 20},\r\n\t{value: -4, probability: 20},\r\n\t{value: -3, probability: 20},\r\n\t{value: -2, probability: 100},\r\n\t{value: -1, probability: 100},\r\n\t{value: 0, probability: 500},\r\n\t{value: 1, probability: 100},\r\n\t{value: 2, probability: 100},\r\n\t{value: 3, probability: 20},\r\n\t{value: 4, probability: 20},\r\n\t{value: 5, probability: 20},\r\n\t{value: 10, probability: 1},\r\n]\r\n","import {getRandomFloat, getRandomInt} from \"./globalFunctions\"\r\nimport {\r\n\ttipHeightData,\r\n\ttipOffsetData,\r\n\ttopAmountData,\r\n\ttopBottomWidthData,\r\n\ttopColorsData,\r\n\ttopHeightData,\r\n\ttopOffset,\r\n\ttopOffsetData,\r\n\ttopRotationData,\r\n\ttopSegmentShrinkData,\r\n\ttopShrinkData,\r\n\ttreeRotationData,\r\n\ttrunkColorsData,\r\n\ttrunkHeightData,\r\n\ttrunkSegmentAmountData,\r\n\ttrunkShrinkData,\r\n\ttrunkWidthData\r\n} from \"./dataSets\";\r\n\r\nconst dataArrayGenerator = (data) => {\r\n\tlet array = []\r\n\tdata.forEach(item => {\r\n\t\tfor (let i = 0; i < item.probability; i++){\r\n\t\t\tarray.push(item.value)\r\n\t\t}\r\n\t})\r\n\treturn array\r\n}\r\n\r\nconst generateItemFromDataset = (dataArray) => {\r\n\tconst generatedArray = dataArrayGenerator(dataArray)\r\n\treturn (generatedArray[getRandomInt(0, generatedArray.length - 1)])\r\n}\r\n\r\nconst trunkArrayGenerator = (segmentAmount, endPoint) => {\r\n\tlet pointArray = []\r\n\tfor (let i = 0; i <= segmentAmount; i++){\r\n\t\tlet array = [\r\n\t\t\tgetRandomFloat(0, 0.5).toFixed(2), // x\r\n\t\t\t((endPoint / segmentAmount) * i).toFixed(2), // y\r\n\t\t\t0, // z\r\n\t\t\tgetRandomFloat(0, 100).toFixed(2) // seed\r\n\t\t]\r\n\t    pointArray.push(array.join(\"|\"))\r\n\t}\r\n\treturn pointArray.join(\",\")\r\n}\r\n\r\nconst topArrayGenerator = (segmentAmount, topSegmentShrink, topShrink) => {\r\n\tlet segmentArray = []\r\n\tlet bottomRadius = generateItemFromDataset(topBottomWidthData)\r\n\tfor (let i = 0; i <= segmentAmount; i++){\r\n\t\tlet tipHeight = generateItemFromDataset(tipHeightData)\r\n\t\tlet rotationY = generateItemFromDataset(topRotationData)\r\n\t\tlet array = [\r\n\t\t\tbottomRadius,\r\n\t\t\t(bottomRadius * topSegmentShrink).toFixed(2),\r\n\t\t\ttipHeight,\r\n\t\t\trotationY,\r\n\t\t]\r\n\t\tsegmentArray.push(array.join(\"|\"))\r\n\t\tbottomRadius *= topShrink\r\n\t}\r\n\treturn segmentArray.join(\",\")\r\n}\r\n\r\nexport const generate = () => {\r\n\t// trunk\r\n\tconst trunkColor = generateItemFromDataset(trunkColorsData)\r\n\tconst trunkWidth = generateItemFromDataset(trunkWidthData)\r\n\tconst trunkShrink = generateItemFromDataset(trunkShrinkData)\r\n\tconst trunkArray = trunkArrayGenerator(\r\n\t\tgenerateItemFromDataset(trunkSegmentAmountData),\r\n\t\tgenerateItemFromDataset(trunkHeightData),\r\n\t)\r\n\r\n\t// top\r\n\tconst topColor = generateItemFromDataset(topColorsData)\r\n\tconst tipHeight = generateItemFromDataset(tipHeightData)\r\n\tconst tipOffsetX = generateItemFromDataset(tipOffsetData)\r\n\tconst tipOffsetY = generateItemFromDataset(tipOffsetData)\r\n\tconst topArray = topArrayGenerator(\r\n\t\tgenerateItemFromDataset(topAmountData),\r\n\t\tgenerateItemFromDataset(topSegmentShrinkData),\r\n\t\tgenerateItemFromDataset(topShrinkData)\r\n\t)\r\n\tconst segmentHeight = generateItemFromDataset(topHeightData)\r\n\tconst topOffsetX = generateItemFromDataset(topOffsetData)\r\n\tconst topOffsetZ = generateItemFromDataset(topOffsetData)\r\n\t\r\n\r\n\r\n\t// assembly\r\n\tconst trunk = [trunkColor, trunkWidth, trunkShrink, trunkArray].join(\"&\")\r\n\tconst top = [topColor, tipHeight, tipOffsetX, tipOffsetY, topArray, segmentHeight, topOffsetX, topOffsetZ].join(\"&\")\r\n\treturn [trunk, top].join(\"^\")\r\n}\r\n\r\n\r\n","import {convertStringToNumber} from \"./globalFunctions\";\r\n\r\nconst stringToPointArray = (string) => {\r\n    let pointArray = []\r\n    string.split(\",\").forEach(item => {\r\n        let array = item.split(\"|\")\r\n        array = array.map(i => parseFloat(i))\r\n        pointArray.push({\r\n            x: array[0],\r\n            y: array[1],\r\n            z: array[2],\r\n            seed: array[3],\r\n        })\r\n    })\r\n    return pointArray\r\n}\r\n\r\nconst trunkDecoder = (data) => {\r\n    const splitData = data.split(\"&\")\r\n    return ({\r\n        color: splitData[0],\r\n        width: parseFloat(splitData[1]),\r\n        shrink: parseFloat(splitData[2]),\r\n        pointArray: stringToPointArray(splitData[3])\r\n    })\r\n}\r\n\r\nconst convertStringToData = (string, trunkTop) => {\r\n    let data = []\r\n    string.split(\",\").forEach(item => {\r\n        item = item.replace(\"x\", trunkTop.x)\r\n        item = item.replace(\"y\", trunkTop.y)\r\n        item = item.replace(\"z\", trunkTop.z)\r\n        let itemArray = item.split(\"|\")\r\n        itemArray = itemArray.map(i => convertStringToNumber(i))\r\n        data.push({\r\n            bottomRadius: itemArray[0],\r\n            topRadius: itemArray[1],\r\n            height: itemArray[2],\r\n            rotationY: itemArray[3],\r\n        })\r\n    })\r\n    return data\r\n}\r\n\r\nconst topDecoder = (string, trunkTop) => {\r\n    let splitData = string.split(\"&\")\r\n    return ({\r\n        color: splitData[0],\r\n        tipHeight: parseFloat(splitData[1]),\r\n        tipOffsetX: parseFloat(splitData[2]),\r\n        tipOffsetZ: parseFloat(splitData[3]),\r\n        data: convertStringToData(splitData[4], trunkTop),\r\n        segmentHeight: parseFloat(splitData[5]),\r\n        topOffsetX: parseFloat(splitData[6]),\r\n        topOffsetZ: parseFloat(splitData[7])\r\n    })\r\n}\r\n\r\nexport const decoder = (data, age) => {\r\n    const splitData = data.split(\"^\")\r\n    const trunkData = trunkDecoder(splitData[0])\r\n    const trunkTop = trunkData.pointArray[trunkData.pointArray.length - 1].y\r\n    const topData = topDecoder(splitData[1], trunkTop)\r\n    if (age <= 2){\r\n        const segmentAmount = Math.floor(age * (trunkData.pointArray.length / 10))\r\n        const totalSegmentAmount = trunkData.pointArray.length\r\n        trunkData.pointArray = trunkData.pointArray.splice(0, segmentAmount <= totalSegmentAmount ? segmentAmount : totalSegmentAmount)\r\n        trunkData.color = \"#74a146\"\r\n        return ({\r\n            trunkData: trunkData,\r\n            scale: age / 20\r\n        })\r\n    } else {\r\n        topData.data = topData.data.splice(0, age - 9)\r\n        return ({\r\n            topData: topData,\r\n            trunkData: trunkData,\r\n            scale: age / 20\r\n        })\r\n    }\r\n}","import {ConeGeometry, Mesh, MeshPhysicalMaterial, Float32BufferAttribute, Group} from \"three\"\r\nimport {convertVectorsToVertices, convertVerticesToVectors, getRandomFloat} from \"./globalFunctions\"\r\n\r\nexport const grass = () => {\r\n\tconst geometry = new ConeGeometry( 0.05, 1, 3, 4)\r\n\tconst material = new MeshPhysicalMaterial({color: \"#5c7a3a\", flatShading: true})\r\n\tconst mesh = new Mesh( geometry, material )\r\n\r\n\tlet vertices = convertVerticesToVectors(mesh.geometry.attributes.position.array)\r\n\tlet heights = vertices.filter((value, index, self) =>\r\n\t\t\tindex === self.findIndex((t) => (\r\n\t\t\t\tt.y === value.y\r\n\t\t\t))\r\n\t)\r\n\r\n\theights = heights.map(height => height.y)\r\n\r\n\theights.forEach(y => {\r\n\t\tlet matchingHeight = vertices.filter(verticle => verticle.y === y)\r\n\t\tmatchingHeight.forEach(verticle => {\r\n\t\t\tvertices[vertices.indexOf(verticle)].x += getRandomFloat(-0.05, 0.05)\r\n\t\t\tvertices[vertices.indexOf(verticle)].z += getRandomFloat(-0.05, 0.05)\r\n\t\t})\r\n\t})\r\n\r\n\tlet newVertices = convertVectorsToVertices(vertices)\r\n\tmesh.geometry.setAttribute('position', new Float32BufferAttribute(newVertices, 3))\r\n\treturn mesh\r\n}\r\n\r\nexport const grassPatch = (point) => {\r\n\tconst offsets = [[1,1], [1,-1], [-1, 1], [-1, -1]]\r\n\tconst group = new Group()\r\n\tfor (let i = 0; i < 4; i++){\r\n\t\tlet single = grass()\r\n\t\tgroup.add(single)\r\n\t}\r\n\treturn group\r\n}\r\n","import './App.css'\r\nimport * as React from 'react'\r\nimport {PerspectiveCamera, Scene, Group, Vector3, Color, BufferAttribute} from 'three'\r\nimport {useEffect, useRef, useState} from \"react\"\r\nimport {generateTop} from \"./treeTops\"\r\nimport {generateTrunk} from \"./trunk\"\r\nimport {generateModel} from \"./generateModel\"\r\nimport {BsArrowsMove} from \"react-icons/bs\"\r\nimport {generate} from \"./generators\"\r\nimport {createIsland} from \"./island\"\r\nimport {getRandomFloat, getRandomInt} from \"./globalFunctions\"\r\nimport {decoder} from \"./decoder\"\r\nimport {rock} from \"./rock\"\r\nimport {grass} from \"./grass\"\r\nimport {MeshSurfaceSampler} from \"three/examples/jsm/math/MeshSurfaceSampler\";\r\nconst App = () => {\r\n    const [scene, setScene] = useState(new Scene())\r\n    const [camera, setCamera] = useState(new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000))\r\n    const container = useRef(null)\r\n\r\n    const growTree = (start, dna, age) => {\r\n        const {trunkData, topData, scale} = decoder(dna, age)\r\n        const {trunkMesh, trunkTop} = generateTrunk(scene, trunkData)\r\n        const topMesh = topData && generateTop(trunkTop, scene, topData)\r\n        const group = new Group()\r\n        group.add(trunkMesh)\r\n        topData && group.add(topMesh)\r\n        group.position.set(start.x, start.y, start.z)\r\n        group.scale.set(scale,scale,scale)\r\n        return {mesh: group, width: topData.data[0].bottomRadius}\r\n     }\r\n\r\n    useEffect(() => {\r\n        const islandMesh = createIsland(scene, 10)\r\n        const group = new Group()\r\n        group.add(islandMesh)\r\n        islandMesh.translateY(-4)\r\n\r\n\r\n        const sampler = new MeshSurfaceSampler(islandMesh).build()\r\n        const tempPosition = new Vector3()\r\n        const meshPositions = []\r\n\r\n        let treeCounter = 0\r\n        while (treeCounter <= 5){\r\n            sampler.sample(tempPosition)\r\n            if(new Vector3(0,0,0).distanceTo(tempPosition) < 9){\r\n                const {mesh, width} = growTree(\r\n                    tempPosition,\r\n                    generate(),\r\n                    getRandomFloat(11, 20)\r\n                )\r\n                mesh.translateY(-3)\r\n                let check = true\r\n                meshPositions.forEach(item => {\r\n                    if (item.position.distanceTo(mesh.position) < item.width + 1.5)\r\n                        check = false\r\n                })\r\n                if (check){\r\n                    group.add(mesh)\r\n                    meshPositions.push({position: mesh.position, width: width})\r\n                    treeCounter++\r\n                }\r\n            }\r\n        }\r\n\r\n        let rockCounter = 0\r\n        while (rockCounter <= 20){\r\n            sampler.sample(tempPosition)\r\n            let mesh = rock(tempPosition)\r\n            if (tempPosition.y > -3 && new Vector3(0,0,0).distanceTo(tempPosition) < 9){\r\n                mesh.position.set(tempPosition.x, tempPosition.y - 3, tempPosition.z);\r\n                let check = true\r\n                meshPositions.forEach(item => {\r\n                    if (item.position.distanceTo(mesh.position) < 1)\r\n                        check = false\r\n                })\r\n                if (check){\r\n                    group.add(mesh)\r\n                    meshPositions.push({position: mesh.position, width: 1})\r\n                    rockCounter++\r\n                }\r\n            }\r\n        }\r\n\r\n        const grassModels = []\r\n        for (let i = 0; i < 10; i++){\r\n            grassModels.push(grass())\r\n        }\r\n        let grassCounter = 0\r\n        while (grassCounter <= 10){\r\n            sampler.sample(tempPosition)\r\n            let mesh = grassModels[getRandomInt(0, 9)].clone()\r\n            if (tempPosition.y > -3 && new Vector3(0,1,0).distanceTo(tempPosition) < 9.4){\r\n                mesh.position.set(tempPosition.x, tempPosition.y - 3, tempPosition.z);\r\n                let check = true\r\n                meshPositions.forEach(item => {\r\n                    if (item.position.distanceTo(mesh.position) < 0.8)\r\n                        check = false\r\n                })\r\n                if (check){\r\n                    group.add(mesh)\r\n                    grassCounter++\r\n                }\r\n            }\r\n        }\r\n        scene.add(group)\r\n        generateModel(scene, setScene, container, camera, setCamera, group)\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {window.innerWidth <= 1000 && <BsArrowsMove className={\"moveButton\"}/>}\r\n            <div ref={container} className={\"container\"} style={window.innerWidth > 1000 ? {backgroundImage: \"url('http://i.imgur.com/HAhyJxB.png?1')\"} : {}}/>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {CylinderGeometry, Mesh, Vector3, Group, MeshPhysicalMaterial, Float32BufferAttribute} from \"three\"\r\nimport {getVertices, updateVertices} from \"./globalFunctions\"\r\nimport {ConvexGeometry} from \"three/examples/jsm/geometries/ConvexGeometry\"\r\nimport { makeNoise2D } from \"open-simplex-noise\"\r\n\r\nexport const generateTrunk = (scene, data) => {\r\n    let {color, width, shrink, pointArray} = data\r\n    let meshArray = []\r\n    const group = new Group()\r\n    const material = new MeshPhysicalMaterial({color: parseInt(color.replace(\"#\",\"0x\"),16), flatShading: true})\r\n\r\n    pointArray.forEach((point) => {\r\n        let geometry = new CylinderGeometry(width, width, 0, 12)\r\n        let mesh = new Mesh(geometry, material)\r\n        mesh.position.set(point.x, point.y, point.z)\r\n        mesh.scale.set(1, 1, 1)\r\n        let vertices = mesh.geometry.attributes.position.array\r\n        let newVertices = new Float32Array(vertices.length)\r\n        const noise2D = makeNoise2D(point.seed)\r\n        for (let i = 0; i <= vertices.length; i += 3) {\r\n            let p = new Vector3(vertices[i],vertices[i + 1],vertices[i + 2])\r\n            p.normalize().multiplyScalar(width + 0.2 * noise2D(p.x * 2, p.y * 2))\r\n            newVertices[i] = p.x\r\n            newVertices[i + 1] = p.y\r\n            newVertices[i + 2] = p.z\r\n        }\r\n        mesh.geometry.setAttribute('position', new Float32BufferAttribute(newVertices, 3))\r\n\r\n        updateVertices(mesh)\r\n\r\n        group.add(mesh)\r\n        meshArray.push(mesh)\r\n        width *= shrink\r\n    })\r\n\r\n    for (let i = 1; i < meshArray.length; i++) {\r\n        let meshes = [meshArray[i - 1], meshArray[i]]\r\n        let vertices = []\r\n        meshes.forEach(mesh => {\r\n            vertices = vertices.concat(getVertices(mesh))\r\n        })\r\n        const geometry = new ConvexGeometry( vertices )\r\n        const mesh = new Mesh( geometry, material )\r\n\r\n        group.add( mesh )\r\n    }\r\n    return {\r\n        trunkMesh: group,\r\n        trunkTop: pointArray[pointArray.length - 1]\r\n    }\r\n}\r\n","import {\r\n    DodecahedronGeometry,\r\n    Mesh,\r\n    MeshPhysicalMaterial,\r\n    Float32BufferAttribute,\r\n    BufferAttribute,\r\n    Color,\r\n    Vector3\r\n} from \"three\"\r\nimport {convertVectorsToVertices, convertVerticesToVectors, getMatchingVertices, getRandomInt} from \"./globalFunctions\"\r\nimport {makeNoise2D} from \"open-simplex-noise\"\r\n\r\nexport const createIsland = (scene, radius) => {\r\n    const mesh = new Mesh(new DodecahedronGeometry(radius, 2), new MeshPhysicalMaterial({vertexColors: true, flatShading: true}));\r\n    let vertices = convertVerticesToVectors(mesh.geometry.attributes.position.array)\r\n    let flatVertices = []\r\n    vertices.forEach((verticle, i) => {\r\n        if (verticle.y > -1){\r\n            let matchingVertices = getMatchingVertices(vertices, i)\r\n            const y = -1\r\n            const noise2D = makeNoise2D()\r\n            matchingVertices.forEach(v => {\r\n                vertices[v].y = y + (0.2 * noise2D(vertices[v].x * 2, vertices[v].y * 0.4)) * (radius / 3)\r\n            })\r\n            flatVertices = flatVertices.concat(matchingVertices)\r\n        }\r\n    })\r\n    mesh.geometry.setAttribute('position', new Float32BufferAttribute(convertVectorsToVertices(vertices), 3))\r\n\r\n    const colors = [];\r\n    const color = new Color();\r\n    vertices.forEach(verticle => {\r\n        color.set( [\"#c9c9c9\", \"#91bd60\"][Math.random() > 0.7 ? 0 : 1] );\r\n\r\n        colors.push( color.r, color.g, color.b );\r\n        colors.push( color.r, color.g, color.b );\r\n        colors.push( color.r, color.g, color.b );\r\n    })\r\n    mesh.geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n    mesh.translateY(1)\r\n    return mesh\r\n}\r\n","import {OctahedronGeometry, Mesh, MeshPhysicalMaterial, Float32BufferAttribute} from \"three\"\r\nimport {convertVectorsToVertices, getRandomFloat, getVertices} from \"./globalFunctions\"\r\nimport {makeNoise3D} from \"open-simplex-noise\";\r\nexport const rock = () => {\r\n\tconst mesh = new Mesh(new OctahedronGeometry(3,1), new MeshPhysicalMaterial({color: \"#919191\", flatShading: true}))\r\n\tconst vertices = getVertices(mesh)\r\n\tconst noise3D = makeNoise3D(Math.random() * 100)\r\n\tvertices.forEach(verticle => {\r\n\t\tconst k = 1\r\n\t\tverticle.normalize().multiplyScalar(1 + 0.2 * noise3D(verticle.x * k, verticle.y * k, verticle.z * k))\r\n\t})\r\n\tconst newVertices = convertVectorsToVertices(vertices)\r\n\tmesh.geometry.setAttribute('position', new Float32BufferAttribute(newVertices, 3))\r\n\r\n\t// mesh.position.set(point.x, point.y, point.z)\r\n\tmesh.scale.set(getRandomFloat(0.5,1),0.5,getRandomFloat(0.5,1))\r\n\treturn mesh\r\n}\r\n","import {AmbientLight, DirectionalLight, MOUSE, PerspectiveCamera, Scene, WebGL1Renderer} from \"three\"\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\"\r\n\r\nexport const generateModel = (scene, setScene, container, camera, setCamera, group) => {\r\n    setScene(new Scene())\r\n\r\n    //camera\r\n    setCamera(new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000))\r\n    camera.position.set( 15, 10, 15 )\r\n\r\n    //light\r\n    const light = new AmbientLight( 0x404040 )\r\n    scene.add( light )\r\n    const directionalLight1 = new DirectionalLight( \"#ffffff\", 0.9 )\r\n    directionalLight1.position.set(-5, 2, 8)\r\n    scene.add( directionalLight1 )\r\n    const directionalLight2 = new DirectionalLight( \"#538628\", 0.5 )\r\n    directionalLight2.position.set(10, 2, -8)\r\n    scene.add( directionalLight2 )\r\n\r\n    //renderer\r\n    const renderer = new WebGL1Renderer({alpha: true})\r\n    renderer.setSize( window.innerWidth, window.innerHeight )\r\n    container.current.innerHTML = \"\"\r\n    container.current.appendChild( renderer.domElement )\r\n\r\n    //controls\r\n    let stop = false;\r\n    const controls = new OrbitControls( camera, renderer.domElement)\r\n    controls.mouseButtons = {\r\n        LEFT: MOUSE.ROTATE,\r\n        MIDDLE: MOUSE.DOLLY,\r\n        RIGHT: MOUSE.PAN\r\n    }\r\n    // controls.minDistance = 25\r\n    // controls.maxDistance = 200\r\n    controls.update()\r\n    controls.addEventListener( 'change', () => {\r\n        stop = true\r\n        renderer.render(scene, camera)\r\n    })\r\n\r\n    const animate = () => {\r\n        if (!stop){\r\n            requestAnimationFrame(animate)\r\n            group.rotateY(0.004)\r\n            renderer.render( scene, camera )\r\n        }\r\n    }\r\n    animate()\r\n    let image = renderer.domElement.toDataURL()\r\n\r\n    return {image: image}\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}